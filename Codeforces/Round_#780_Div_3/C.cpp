#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

typedef long long ll;

/*
    문제 설명: 어떤 문자열 S가 주어지면 이를 "짝수 문자열"로 변환하는 최소 편집 횟수를 출력한다.
    "짝수 문자"는 다음 조건을 동시에 만족해야한다.
    (1) 문자열의 길이는 짝수이다.
    (2) 문자열의 문자는 이어진 개수가 짝수여야한다.
    EX) "", "tt", "aabb", "oooo", "ttrrrroouuuuuuuukk"

    풀이: 편집을 최소로 만들려면 "짝수 문자열" 길이를 최대로 만들어야 한다.
    cache에는 "짝수 문자열"의 최대 길이를 저장한다.
    vs 배열은 문자열에 있는 문자의 최근 한 칸뒤 인덱스 번호를 저장하는 배열이다.
    따라서 크기는 26개('a' ~ 'z')이고 최근의 인덱스 번호가 저장됬는지 유무를 확인하기 위해 -1로 초기화한다.
    빈 문자열("") 또한 "짝수 문자열"이다. 따라서 cache[0]에는 0을 저장한다.
    문자열을 순회하면서 cache에 값을 저장하는 조건은 다음과 같다.
    (1) 문자열의 i번째 문자에 'a'를 빼서 vs의 인덱스 번호를 얻는다.
    (2) cache에 바로 전까지 만든 "짝수 문자열"의 최대 길이를 저장한다.
    (3) 문자열에 확인된 문자가 처음 등장한 문자라면 완성된 "짝수 문자열"에 추가적으로 "짝수 문자열"이 될 수 없다.
        따라서 (2)에서 저장된 "짝수 문자열"의 길이가 최대 길이가 된다.
        반대로 문자열에 확인된 문자가 이미 발견된 문자라면 vs 배열에 한 칸뒤의 인덱스를 해당되는 문자에 저장한다.
        한 칸뒤 인덱스를 저장하는 이유는 연속된 문자의 개수가 짝수여야 "짝수 문자열"되기 때문이다.
        "짝수 문자열"에 아무 문자 하나가 들어와도 그 문자열은 "짝수 문자열"이 되지 않는다. 연속되는 문자가 홀수개이기 때문이다.
        같은 문자가 한번 더 들어와야 연속된 문자가 짝수개인 "짝수 문자열"이 완성된다.
        따라서 한 칸뒤의 이미 완성된 "짝수 문자열"에서 최대 길이를 갱신해야 한다.
        해당 문자를 넣어서 만든 "짝수 문자열"의 최대 길이와 이전에 만들어진 "짝수 문자열"의 최대 길이를 비교해서 최대값을 cache에 저장한다.
    위 조건을 기반으로 문자열을 순회하여 cache를 갱신한다.
    출력해야하는 값은 최소 편집 횟수임으로 cache에 마지막에 저장된 값(완성된 "짝수 문자열"의 최대 길이)에 2를 곱해서 전체 문자열의 길이에 뺀다.
*/

int cache[200001];

int main() {
    int t;
    cin >> t;

    while (t--) {
        string s;
        cin >> s;

        int len = s.size();

        vector<int> vs(26, -1);
        vector<int> cache(len + 1, 0);

        for (int i = 0; i < len; i++) {
            int idx = s[i] - 'a';
            cache[i + 1] = cache[i];
            if (vs[idx] != -1) cache[i + 1] = max(cache[i + 1], cache[vs[idx]] + 1);
            vs[idx] = i;
        }

        for (int i = 1; i <= len; i++) cout << cache[i] << ' ';
        cout << '\n';

        cout << len - 2 * cache.back() << '\n';
    }
}