#include <iostream>

using namespace std;

typedef long long ll;

/*
    문제 설명: a개의 1원 동전과, b개의 2원 동전이 있다.
    거스름돈을 받는 최소의 가격 또는 모든 동전을 사용해서도 살 수 없는 최소의 가격을 출력한다.

    풀이: 만약 1원 동전이 하나도 없으면 거스름돈을 받는 최소의 가격은 무조건 1원이다.
    2원 동전으로는 1원 가격의 물건을 살 경우 1원의 거스름돈을 받기 때문이다.
    1원 동전이 하나라도 있으면 a + 2b 가격까지는 거스름돈이 생기지 않는다.
    1원 동전으로만 살 수 있는 가격은 a원이다. a원에서 a + 2b원까지는 2원 동전을 추가해야 살 수 있다.
    a원이 홀수일 경우 a원에서 a + 2b원 범위내의 가격이 홀수일 경우 2원을 추가해주면 거스름돈 없이 구매할 수 있다.
    a원이 짝수일 경우 a원에서 a + 2b원 범위내의 가격이 홀수일 경우 a원에서 1원 동전을 하나 제외하고 2원을 추가해주면 거스름돈 없이 구매할 수 있다.
    a + 2b원 범위내의 가격이 짝수일 경우에도 동일하다.
    따라서 모든 동전을 사용해서도 살 수 없는 최소의 가격인 a + 2b + 1을 출력해야 한다.
*/

int main() {
    int t;
    cin >> t;

    while (t--) {
        ll n, m;
        cin >> n >> m;

        ll answer = n + (m * 2ll) + 1ll;

        if (n != 0) {
            cout << answer << '\n';
        }
        else cout << 1 << '\n';
    }
}